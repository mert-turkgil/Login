@using Login.Identity
@inject RoleManager<IdentityRole> _roleManager
@inject UserManager<User> _userManager
@model Login.Models.UserViewModel



<div class="container mt-5">
    <div class="card shadow">
        <div class="card-header bg-info text-white">
            <h3 class="card-title mb-0"><i class="fas fa-user-circle"></i> Account Details</h3>
        </div>
        <div class="card-body">
            <dl class="row">
                <dt class="col-sm-3">Full Name:</dt>
                <dd class="col-sm-9">@(Model?.FirstName ?? "N/A") @(Model?.LastName ?? "N/A")</dd>

                <dt class="col-sm-3">Email:</dt>
                <dd class="col-sm-9">@(Model?.Email ?? "N/A")</dd>

                <dt class="col-sm-3">Account Created:</dt>
                <dd class="col-sm-9">@(Model?.CreatedDate.ToString("MMMM dd, yyyy") ?? "N/A")</dd>

                <dt class="col-sm-3">User Name:</dt>
                <dd class="col-sm-9">@(Model?.UserName ?? "N/A")</dd>

                <dt class="col-sm-3">Role Name:</dt>
                <dd class="col-sm-9">
                    @{
                        var userRoles = await _userManager.GetRolesAsync(Model!.User);
                        if (userRoles != null && userRoles.Any())
                        {
                            <ul>
                                @foreach (var role in userRoles)
                                {
                                    <li>@role</li>
                                }
                            </ul>
                        }
                        else
                        {
                            <span>N/A</span>
                        }
                    }
                </dd>
            </dl>
            <div class="navbar">
            <div class="text-center mt-4">
                <form asp-action="Logout" method="post">
                    <button type="submit" class="btn btn-danger btn-lg"><i class="fas fa-sign-out-alt"></i> Log Out</button>
                </form>
            </div>
            @if (User.IsInRole("Admin"))
            {
                <div class="text-center mt-3">
                    <!-- Shutdown All Rooms -->
                    <form asp-controller="Mqtt" asp-action="ShutdownAll" method="post">
                        <button type="submit" id="btnShutdownAll" class="btn btn-danger btn-lg">
                            Shutdown All Rooms
                        </button>
                    </form>
                </div>

                <div class="text-center mt-3">
                    <!-- Lock All Rooms -->
                    <form asp-controller="Mqtt" asp-action="LockAll" method="post">
                        <button type="submit" id="btnLockAll" class="btn btn-warning btn-lg">
                            Lock All Rooms
                        </button>
                    </form>
                </div>

                <div class="text-center mt-3">
                    <!-- Unlock All Rooms -->
                    <form asp-controller="Mqtt" asp-action="UnlockAll" method="post">
                        <button type="submit" id="btnUnlockAll" class="btn btn-success btn-lg">
                            Unlock All Rooms
                        </button>
                    </form>
                </div>

            }
            </div>
        </div>
    </div>

    @if(User.IsInRole("Admin"))
    {
        <section id="UserManagment">
        <div class="card shadow mt-4">
            <div class="card-header bg-primary text-white">
                <h3 class="card-title mb-0"><i class="fas fa-tv"></i> User Managment</h3>
            </div>
            <div class="card-body">
                <!-- Invoke the User Management ViewComponent -->
                @await Component.InvokeAsync("UserManagement")
            </div>
        </div>
        </section>
    }

    <!-- Polling-based Real-Time Room Data -->
    <div class="card shadow mt-4">
        <div class="card-header bg-primary text-white">
            <h3 class="card-title mb-0"><i class="fas fa-tv"></i> Real-Time Room Data</h3>
        </div>
        <div class="card-body" id="polRoomCardsContainer">
            <partial name="_polRoomCards" model="Model.RoomCards" />
        </div>
    </div>

</div>


@section Scripts{
<script>
    // Poll every 1 second (1000 milliseconds) for updated polling data.
    setInterval(function () {
        fetch('/Home/RefreshPolRoomCards')
            .then(response => response.text())
            .then(html => {
                document.getElementById('polRoomCardsContainer').innerHTML = html;
            })
            .catch(error => console.error("Error refreshing polling partial:", error));
    }, 1000);
</script>
}