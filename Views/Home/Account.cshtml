@using Login.Identity
@inject RoleManager<IdentityRole> _roleManager
@inject UserManager<User> _userManager
@model Login.Models.UserViewModel

@section Scripts{ 
<!-- Include the SignalR client library -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.5/signalr.min.js"></script>

<script>
    // Establish the SignalR connection
    const connection = new signalR.HubConnectionBuilder()
        .withUrl("/notificationHub") // Ensure this matches your hub endpoint
        .build();

    // Start the connection
    connection.start()
        .then(() => {
            console.log("Connected to NotificationHub.");
        })
        .catch(err => console.error("Error connecting to NotificationHub: ", err));

    // Listen for room update notifications
    connection.on("ReceiveNotification", function (roomUpdate) {
        // roomUpdate should be an object with: id, RoomName, Status, Temperature, IsLocked
        const roomId = roomUpdate.id;

        // Update the status badge (assumes IDs like "roomStatus_1", "roomStatus_2", etc.)
        const statusElem = document.getElementById("roomStatus_" + roomId);
        if (statusElem) {
            // Assume "0" means Closed; otherwise, Working
            statusElem.innerText = roomUpdate.Status === "0" ? "Closed" : "Working";
            statusElem.className = "badge " + (roomUpdate.Status === "0" ? "bg-danger" : "bg-success");
        }

        // Update the temperature display (assumes IDs like "roomTemp_1", "roomTemp_2", etc.)
        const tempElem = document.getElementById("roomTemp_" + roomId);
        if (tempElem) {
            tempElem.innerText = roomUpdate.Temperature + "°C";
            // Change text color based on the temperature value
            tempElem.style.color = roomUpdate.Temperature > 30 ? "red" :
                                     roomUpdate.Temperature < 10 ? "blue" : "black";
        }

        // Update the weather condition (assumes IDs like "weather_1", "weather_2", etc.)
        const weatherElem = document.getElementById("weather_" + roomId);
        if (weatherElem) {
            let weather = "";
            const temp = roomUpdate.Temperature;
            if (temp >= 50) weather = "🔥 Burning Hot";
            else if (temp > 30) weather = "☀️ Sunny";
            else if (temp > 20) weather = "🌤️ Pleasant";
            else if (temp > 10) weather = "🌥️ Chilly";
            else if (temp >= 0) weather = "❄️ Snowy";
            else weather = "🧊 Ice Cold";
            weatherElem.innerText = weather;
        }

        // Disable or enable all buttons within the room card based on the IsLocked value.
        // Make sure each room card container has an id like "roomCard_1", "roomCard_2", etc.
        const cardContainer = document.getElementById("roomCard_" + roomId);
        if (cardContainer) {
            // Find all button elements within the card container.
            const buttons = cardContainer.querySelectorAll("button");
            buttons.forEach(btn => {
                btn.disabled = roomUpdate.IsLocked;
            });
        }
    });
</script>

}

<div class="container mt-5">
    <div class="card shadow">
        <div class="card-header bg-info text-white">
            <h3 class="card-title mb-0"><i class="fas fa-user-circle"></i> Account Details</h3>
        </div>
        <div class="card-body">
            <dl class="row">
                <dt class="col-sm-3">Full Name:</dt>
                <dd class="col-sm-9">@(Model?.FirstName ?? "N/A") @(Model?.LastName ?? "N/A")</dd>

                <dt class="col-sm-3">Email:</dt>
                <dd class="col-sm-9">@(Model?.Email ?? "N/A")</dd>

                <dt class="col-sm-3">Account Created:</dt>
                <dd class="col-sm-9">@(Model?.CreatedDate.ToString("MMMM dd, yyyy") ?? "N/A")</dd>

                <dt class="col-sm-3">User Name:</dt>
                <dd class="col-sm-9">@(Model?.UserName ?? "N/A")</dd>

                <dt class="col-sm-3">Role Name:</dt>
                <dd class="col-sm-9">
                    @{
                        var userRoles = await _userManager.GetRolesAsync(Model!.User);
                        if (userRoles != null && userRoles.Any())
                        {
                            <ul>
                                @foreach (var role in userRoles)
                                {
                                    <li>@role</li>
                                }
                            </ul>
                        }
                        else
                        {
                            <span>N/A</span>
                        }
                    }
                </dd>
            </dl>
            <div class="navbar">
            <div class="text-center mt-4">
                <form asp-action="Logout" method="post">
                    <button type="submit" class="btn btn-danger btn-lg"><i class="fas fa-sign-out-alt"></i> Log Out</button>
                </form>
            </div>
            @if (User.IsInRole("Admin"))
            {
                <div class="text-center mt-3">
                    <!-- Shutdown All Rooms -->
                    <form asp-controller="Mqtt" asp-action="ShutdownAll" method="post">
                        <button type="submit" id="btnShutdownAll" class="btn btn-danger btn-lg">
                            Shutdown All Rooms
                        </button>
                    </form>
                </div>

                <div class="text-center mt-3">
                    <!-- Lock All Rooms -->
                    <form asp-controller="Mqtt" asp-action="LockAll" method="post">
                        <button type="submit" id="btnLockAll" class="btn btn-warning btn-lg">
                            Lock All Rooms
                        </button>
                    </form>
                </div>

                <div class="text-center mt-3">
                    <!-- Unlock All Rooms -->
                    <form asp-controller="Mqtt" asp-action="UnlockAll" method="post">
                        <button type="submit" id="btnUnlockAll" class="btn btn-success btn-lg">
                            Unlock All Rooms
                        </button>
                    </form>
                </div>

            }
            </div>
        </div>
    </div>

    @if(User.IsInRole("Admin"))
    {
        <section id="UserManagment">
        <div class="card shadow mt-4">
            <div class="card-header bg-primary text-white">
                <h3 class="card-title mb-0"><i class="fas fa-tv"></i> User Managment</h3>
            </div>
            <div class="card-body">
                <!-- Invoke the User Management ViewComponent -->
                @await Component.InvokeAsync("UserManagement")
            </div>
        </div>
        </section>
    }

    <!-- Partial View for Room Cards -->
    <div class="card shadow mt-4">
        <div class="card-header bg-primary text-white">
            <h3 class="card-title mb-0"><i class="fas fa-tv"></i> Real-Time Room Data</h3>
        </div>
        <div class="card-body">
           <partial name="_RoomCards" model="Model.RoomCards" />
        </div>
    </div>

</div>


